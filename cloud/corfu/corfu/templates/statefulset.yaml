apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "corfu.fullname" . }}
  labels:
    {{- include "corfu.labels" . | indent 4 }}
spec:
  serviceName: {{ include "corfu.name" . }}-headless
  replicas: {{ include "corfu.replicas" . }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      {{- include "corfu.selectors" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "corfu.selectors" . | nindent 8 }}
    spec:
      {{- if .Values.imagePullSecretsEnabled }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "corfu.serviceAccountName" . }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: create-layout
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - "/bin/bash"
            - "-c"
            - |
              set -e
              python3 /etc/corfu/configs/init_layout.py --template /etc/corfu/configs/layout_template.json --layout /usr/share/configs/layout.json \
              --replica {{ include "corfu.replicas" . }} --statefulset {{ include "corfu.fullname" . }} --headless {{ include "corfu.name" . }}-headless --port {{ .Values.service.port }} --type {{ .Values.cluster.type }}
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: workdir
              mountPath: /usr/share/configs
            - name: {{ include "corfu.fullname" . }}-layout-configs
              mountPath: /etc/corfu/configs
      containers:
        - name: bootstrap-corfu
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: workdir
              mountPath: /configs
            {{- if .Values.persistence.enabled }}
            - name: corfu-data
              mountPath: /config
            {{- end }}
            {{- if .Values.tls.enabled }}
            - name: certificate
              mountPath: /certs
            - name: password
              mountPath: /password
            {{- end }}
          command:
            - "/bin/bash"
            - "-c"
            - |
              set -e
              if test -f /config/corfu/LAYOUT_CURRENT.ds; then
                  echo "Current node is bootstrapped. Nothing to do."
                  sleep inf
              fi
              
              {{- if .Values.version.new }}
              {{- if .Values.tls.enabled }}
              certs_truststore_file=/certs/truststore.jks
              if test -f "$certs_truststore_file";
              then
                echo "$certs_truststore_file mounted sucessfully."
              else
                echo "ERROR: $certs_truststore_file NOT mounted!"
                exit 1
              fi
              {{- end }}
              /usr/share/corfu/bin/corfu_ping \
              {{- if .Values.tls.enabled }}
              --enable-tls --keystore=/certs/keystore.jks  --truststore=/certs/truststore.jks \
              --keystore-password-file=/password/password --truststore-password-file=/password/password \
              {{- end }}
              --retries 10 --timeout 5000 $POD_NAME.{{ include "corfu.name" . }}-headless.$POD_NAMESPACE.svc.cluster.local:9000 \
              &> /tmp/ping.log

              if grep -q "All nodes are reachable!" "/tmp/ping.log"; then
                echo "Local node is up"
              else
                cat /tmp/ping.log
                exit 1
              fi
              {{- end }}

              echo "bootstrap local node with layout:"
              cat /configs/layout.json
              echo

              /usr/share/corfu/bin/corfu_bootstrap_cluster --layout=/configs/layout.json \
              -n "$POD_NAME.{{ include "corfu.name" . }}-headless.$POD_NAMESPACE.svc.cluster.local:9000" \
              --connection-timeout 2000 \
              {{- if .Values.tls.enabled }}
              --enable-tls --keystore=/certs/keystore.jks  --truststore=/certs/truststore.jks \
              --keystore-password-file=/password/password --truststore-password-file=/password/password \
              {{- end }}
              &> /tmp/bootstrap.log

              if grep -q "New layout installed successfully for this node!" "/tmp/bootstrap.log"; then
                echo "Above layout was installed successfully!"
                exit 0
              fi

              echo "Bootstrap has failed with an error"
              cat /tmp/bootstrap.log
              exit 1
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
        - name: corfu
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          readinessProbe:
            exec:
              command:
                - "sh"
                - "-c"
                - |
                  if test -f /config/corfu/LAYOUT_CURRENT.ds;
                  then
                    exit 0
                  else
                    echo "ERROR: Corfu is not ready to accept requests!"
                    exit 1
                  fi
            initialDelaySeconds: 300
            periodSeconds: 5
            failureThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command:
                - "sh"
                - "-c"
                - |
                  output=$(curl $POD_NAME.{{ include "corfu.name" . }}-headless.$POD_NAMESPACE.svc.cluster.local:8080/health | jq -r .liveness.status)
                  if [ "$output" == "DOWN"]; then
                    exit 1
                  fi
            initialDelaySeconds: 300
            periodSeconds: 5
            failureThreshold: 1
            timeoutSeconds: 5
          command:
            - "sh"
            - "-c"
            - |
              java \
              $(JAVA_OPTS) \
              -cp *.jar \
              -Dlogback.configurationFile=/usr/share/corfu/conf/logback.prod.xml \
              -Djava.io.tmpdir=/tmp \
              org.corfudb.infrastructure.CorfuServer \
              -a $POD_NAME.{{ include "corfu.name" . }}-headless.$POD_NAMESPACE.svc.cluster.local \
              {{- if .Values.persistence.enabled }}
              -l /config \
              {{- else }}
              -m \
              {{- end }}
              {{- if .Values.tls.enabled }}
              --enable-tls --enable-tls-mutual-auth --keystore=/certs/keystore.jks  --truststore=/certs/truststore.jks \
              --keystore-password-file=/password/password --truststore-password-file=/password/password \
              {{- end }}
              -c {{ .Values.extraServerArgs.cacheHeapRatio }} \
              -k {{ .Values.extraServerArgs.sequencerCacheSize }} \
              -d {{ .Values.extraServerArgs.logLevel }} \
              --log-size-quota-percentage {{ .Values.extraServerArgs.logSizeQuotaPercentage }} \
              {{- if .Values.version.new }}
              --compactor-script {{ .Values.extraServerArgs.compactorScript }} \
              --compactor-config {{ .Values.extraServerArgs.compactorConfig }} \
              --compaction-trigger-freq-ms {{ .Values.extraServerArgs.compactorTriggerFreqMs }} \
              --health-port={{ .Values.service.healthPort }} \
              {{- end }}
              {{- if .Values.extraServerArgs.metricsEnabled }}
              --metrics \
              {{- end }}
              {{ .Values.service.port }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- if .Values.jvmArgsFilePath }}
            - name: JAVA_OPTS
              value: |-
                {{- .Files.Get .Values.jvmArgsFilePath | nindent 16 }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            - name: corfu-data
              mountPath: /config
            {{- end }}
            {{- if .Values.tls.enabled }}
            - name: certificate
              mountPath: /certs
            - name: password
              mountPath: /password
            {{- end }}
            - name: {{ include "corfu.fullname" . }}-corfu-configs
              mountPath: /usr/share/corfu/conf
            - name: log-dir
              mountPath: /var/log/corfu
      volumes:
      {{- if .Values.tls.enabled }}
        - name: certificate
          secret:
            secretName: {{ .Values.tls.secretName }}
        - name: password
          secret:
            secretName: {{ .Values.tls.passwordName }}
      {{- end }}
        - name: log-dir
          emptyDir: {}
        - name: workdir
          emptyDir: {}
        - name: {{ include "corfu.fullname" . }}-layout-configs
          configMap:
            name: {{ include "corfu.fullname" . }}-layout-configs
        - name: {{ include "corfu.fullname" . }}-corfu-configs
          configMap:
            name: {{ include "corfu.fullname" . }}-corfu-configs
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: corfu-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: "{{ .Values.persistence.storageClass }}"
        resources:
          requests:
            storage: {{ .Values.persistence.storageSize }}
    - metadata:
        name: log-dir
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: "{{ .Values.logPersistence.storageClass }}"
        resources:
          requests:
            storage: {{ .Values.logPersistence.storageSize }}
  {{- end }}

